  
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS EKS cluster 
Parameters:
  ClusterName:
    Type: String
    Description: Put the cluster name to deploy
  MinSize:
    Type: Number
    Description: Number of worker nodes to create
    Default: 1
  Maxsize:
    Type: Number
    Description: Number of worker nodes to create
    Default: 2
  WorkerNodesInstanceType:
    Type: String
    Description: EC2 instance type for the worker nodes
    Default: t3a.medium
  k8sSubnets:
    Description: Subnets for the ECS Clusters
    Type: List<AWS::EC2::Subnet::Id>
  EksAmiIds:    
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.14/amazon-linux-2/recommended/image_id
  VPC:
    Type: "AWS::EC2::VPC::Id"
    Description: The VPC of your ptoyect
  KubernetesVersion:
    Type: String
    Description: eks version example 1.26  1.25 / 1.22
    Default: 1.26
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "K8s cluster"
        Parameters:
          - ClusterName
          - NumWorkerNodes
          - WorkerNodesInstanceType
          - KeyPair
          - k8sSubnets
          - Vpc
          - KeyPairName
          - EksAmiIds

Resources:
  #============================================================================#
  # Control plane security group
  #============================================================================#

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the elastic network interfaces between the control plane and the worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ControlPlaneSecurityGroup"

  ControlPlaneIngressFromWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from worker nodes (for API server)
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  ControlPlaneEgressToWorkerNodesKubelet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing kubelet traffic (TCP/10250) to worker nodes
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
  ControlPlaneEgressToWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing HTTPS traffic (TCP/442) to worker nodes (for pods running extension API servers)
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  #============================================================================#
  # Worker nodes security group
  # Note: default egress rule (allow all traffic to all destinations) applies
  #============================================================================#
  WorkerNodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all the worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WorkerNodesSecurityGroup"
        - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
          Value: "owned"
  WorkerNodesIngressFromWorkerNodes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all incoming traffic from other worker nodes
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: "-1"
  WorkerNodesIngressFromControlPlaneKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming kubelet traffic (TCP/10250) from control plane 
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
  WorkerNodesIngressFromControlPlaneHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from control plane (for pods running extension API servers)
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  #============================================================================#
  # Control plane
  #============================================================================#
  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt ControlPlaneRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        EndpointPrivateAccess: true
        EndpointPublicAccess: true  
        SubnetIds: !Ref k8sSubnets
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
  ControlPlaneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  #============================================================================#
  # Control plane Addon's
  #============================================================================#

  VpcCniAddon:
    Type: AWS::EKS::Addon
    DependsOn: ControlPlane
    Properties:
      AddonName: vpc-cni
      AddonVersion: v1.12.6-eksbuild.1
      ClusterName: !Ref ClusterName
      ResolveConflicts: OVERWRITE
      ServiceAccountRoleArn: !GetAtt ControlPlaneRole.Arn

  EbsCSIDriverAddon:
    Type: AWS::EKS::Addon
    DependsOn: ControlPlane
    Properties:
      AddonName: aws-ebs-csi-driver
      AddonVersion: v1.18.0-eksbuild.1
      ClusterName: !Ref ClusterName
      ResolveConflicts: OVERWRITE
      ServiceAccountRoleArn: !GetAtt ControlPlaneRole.Arn

  CoreDNSAddon:
    Type: AWS::EKS::Addon
    DependsOn: ControlPlane
    Properties:
      AddonName: coredns
      AddonVersion: v1.9.3-eksbuild.3
      ClusterName: !Ref ClusterName
      ResolveConflicts: OVERWRITE
      ServiceAccountRoleArn: !GetAtt ControlPlaneRole.Arn

  KubeProxyAddon:
    Type: AWS::EKS::Addon
    DependsOn: ControlPlane
    Properties:
      AddonName: kube-proxy
      AddonVersion: v1.26.4-eksbuild.1
      ClusterName: !Ref ClusterName
      ResolveConflicts: OVERWRITE
      ServiceAccountRoleArn: !GetAtt ControlPlaneRole.Arn



  #============================================================================#
  #  Deploy Managed Kubernetes Resources - Worker Nodes
  #============================================================================#
  KubeNodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  KubeClusterNodegroupFleet:
    Type: AWS::EKS::Nodegroup
    DependsOn: ControlPlane
    Properties:
      ClusterName: !Ref ClusterName
      NodeRole: !GetAtt KubeNodeGroupRole.Arn
      InstanceTypes:
        - !Ref WorkerNodesInstanceType
      CapacityType: SPOT
      ScalingConfig:
        MinSize: !Ref MinSize
        DesiredSize: !Ref MinSize
        MaxSize: !Ref Maxsize
      Subnets: !Ref k8sSubnets
      Tags: 
        Name: !Sub '${ClusterName}-Nodes'
        eks_role: node_group










